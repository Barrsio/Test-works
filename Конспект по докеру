Что такое Docker?
Docker — это платформа для разработки, доставки и запуска приложений в контейнерах. Контейнеры позволяют изолировать приложение и его зависимости, обеспечивая одинаковую среду для разработки, тестирования и продакшена.
Основные компоненты Docker
1.	Образы (Images)
	Шаблоны, содержащие всё необходимое для запуска приложения: код, зависимости, настройки.
	Создаются на основе файла Dockerfile.
2.	Контейнеры (Containers)
	Запущенные экземпляры образов.
	Легковесные, изолированные и портативные.
3.	Dockerfile
	Скрипт, содержащий инструкции для создания образа.
	Пример:
FROM python:3.8
WORKDIR /app
COPY . /app
RUN pip install -r requirements.txt
CMD ["python", "app.py"]
4.	Docker Hub
	Центральный репозиторий для хранения и обмена образами.
5.	Docker Compose
	Инструмент для определения и запуска многоконтейнерных приложений.
	Файл docker-compose.yml описывает, как контейнеры взаимодействуют между собой.

Основные команды Docker
1.	Работа с образами:
	docker build -t myimage . — создать образ из Dockerfile.
	docker images — список локальных образов.
	docker pull <image> — загрузить образ из Docker Hub.
2.	Работа с контейнерами:
	docker run -d -p 8080:80 myimage — запустить контейнер.
	docker ps — список запущенных контейнеров.
	docker ps -a — список всех контейнеров.
	docker stop <container_id> — остановить контейнер.
	docker rm <container_id> — удалить контейнер.
3.	Управление ресурсами:
	docker volume ls — список томов.
	docker network ls — список сетей.

Преимущества Docker
1.	Изоляция: контейнеры независимы друг от друга и от хоста.
2.	Портативность: "запустится где угодно".
3.	Легкость: контейнеры легче виртуальных машин.
4.	Скорость: быстрое развертывание и запуск приложений.
5.	Масштабируемость: легко создавать микросервисы.

Примеры использования
1.	Запуск базы данных:
docker run -d -p 5432:5432 --name postgres -e POSTGRES_PASSWORD=123 postgres
2.	Сборка и запуск приложения:
docker build -t myapp .
docker run -d -p 5000:5000 myapp
3.	Использование Docker Compose:
version: '3.8'
services:
  web:
    build: .
    ports:
      - "5000:5000"
  db:
    image: postgres
    environment:
      POSTGRES_PASSWORD: 123
